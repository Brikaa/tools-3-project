- Root
  - userCtx: {
    id,
    username,
    role,
    token
  }
  - setUserCtx(token)
    - if token
      - getAccount with token
      - Determine userCtx based on getAccount response
      - localStorage put token
    else
      - userCtx is null
  - On init
    - setUserCtx(localStorage.getItem(token))

- GuestNavbar
  - Login
    - Post to login
    - emit userCtxEvent(token)
  - Register
    - Post to register
    - Alert result

- UserNavbar
  - {userCtx.role} {userCtx.username}
  - Logout
    - emit userCtxEvent()

- PatientComponent
  - doctors: doctor[]
  - slots: slot[]
  - appointments: appointment[]
  - selectedDoctorId
  - setDoctors()
    - Get doctors
    - doctors = received
  - setSelectedDoctorId(id)
    - selectedDoctorId = id
    - get slots for doctor of id
    - slots = received
  - setAppointments()
    - get appointments
    - appointments = received
  - scheduleAppointment(slotId)
    - Put appointment at slotId
    - setSelectedDoctorId(selectedDoctorId) // refresh
    - setAppointments() // refresh
  - cancelAppointment(id)
    - Delete appointment of id
    - setSelectedDoctorId(selectedDoctorId) // refresh
    - setAppointments() // refresh
  - EditAppointmentSlot(id)
    - prompt: new slotId
    - edit appointment of id to be of slotId
    - setSelectedDoctorId(selectedDoctorId) // refresh
    - setAppointments() // refresh
  - OnInit()
    - setDoctors()
    - setAppointments()
  - Doctor drop down (for doctor of doctors)
    - on change: setSelectedDoctorId(target.value)
  - Slots for that doctor (for slot of slots)
    - Schedule appointment
      - scheduleAppointment(slot.id)
  - Appointments (for appointment of appointments)
    - Cancel appointment button
      - cancelAppointment(appointment.id)
    - Edit slot button
      - editAppointmentSlot(appointment.id)

- DoctorComponent
  - slots
  - appointments
  - setSlots()
    - get slots
    - slots = received
  - setAppointments()
    - get doctor appointments
    - appointments = received
  - createSlot()
    - prompt: startDate
    - prompt: endDate
    - create slot with startDate and endDate
    - setSlots() // refresh
  - editSlot(slotId)
    - prompt: startDate
    - prompt: endDate
    - update slot of slotId with startDate and endDate
    - setSlots() // refresh
  - deleteSlot(slotId)
    - delete slot of slotId
    - setSlots() // refresh
  - onInit()
    - setSlots()
    - setAppointments()
    - websocket subscribe to /appointments
      - on message
        - notify message
        - setSlots()
        - setAppointments()
  - Slots (for slot in slots)
    - "create new" button at top
      - createSlot()
    - Edit button for each one
      - editSlot(slot.id)
    - Delete button for each one
      - deleteSlot(slot.id)
  - Appointments (for appointment in appointments)

===================================================
Components composition

- Root
  - GuestNavbar [if userCtx = null] -> userCtxEvent
  - UserNavbar [if userCtx != null] <- userCtx, -> UserCtxEvent
  - PatientComponent [if userCtx.role = 'patient'] <- userCtx
  - DoctorComponent [if userCtx.role = 'doctor'] <- userCtx
