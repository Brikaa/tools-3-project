- Auth(role, fn)
  return (c) => {
    - user = repo(db) select user by c.username and c.password
    - if (!user)
      - c.return 401
    - if (role && user.role != role)
      - c.return 403
    - userContext = createContext(user)
    - fn(userContext, c)
  }

- FunctionThanNeedsAuth(userContext, c)
  - do stuff with userContext
  - return json stuff with c

- router.post("something", Auth("doctor", FunctionThatNeedsAuth))

- Business rules
  - Username must only contain letters and numbers

- POST /signup
  - user = repo select user by username
  - if (user) return 400 "A user with this username already exists"
  - repo insert user
  - return 200
- POST /login
  - user = repo select user by username and password
  - if (!user) return 400 "Invalid username or password"
  - return { "token": base64encode("id:password") }
- GET /user
  - user (without password) = repo select by userId
  - if (!user) return 404
  - return { "user": user }

- PUT /slots (auth doctor)
  - reservedSlot = repo select slot
    where (req.start >= start and req.start <= req.end) or (req.end >= start and req.end <= req.end)
    and doctorId = userId
  - if reservedSlot != null
    - 400
  - repo insert slot
  - 201
- PUT /slots/{id} (auth doctor)
  - Same business rules as PUT /slots
  - updated = repo update slot where id = req.id
  - if !updated
    - 404
  - 200
- GET /slots (auth doctor)
  - repo select slots where doctorId = userId order by start
- GET /doctor-appointments (auth doctor)
  - repo select appointments where slot.doctorId = userId order by slot.start
- WS /doctor-appointments (auth doctor)
  - Subscribe thread to appointment.(ctx.doctorId) channel
  - On message receive
    - forward message to socket
- DELETE /slots/{id} (auth doctor)
  - noDeleted = repo delete where id = req.id and doctorId = userId
  - if noDeleted == 0
    - 404
  - 200

- GET /appointments (auth patient)
  - repo select appointments where patientId = userId order by start
- PUT /appointments (auth patient)
  - reserved = repo select appointment where slotId = req.slotId
  - if reserved != null
    - 400
  - slot = repo select slot where slotId = req.slotId
  - if slot == null
    - 400
  - repo insert into appointment
  - 200
  - slotId = repo select doctorId from slot where id = req.slotId
  - send to appointment.(doctorId) topic: { doctorId, ctx.id, operation: "appointmentCreated" }
- PUT /appointments/{id} (auth patient)
  - Same business rules as PUT /appointments
  - updated = repo update appointment where id = req.id
  - if !updated
    - 404
  - 200
  - doctorId = repo select doctorId from slot where id = req.slotId
  - send to appointment.(doctorId) topic: { doctorId, ctx.id, operation: "appointmentUpdated" }
- DELETE /appointments/{id} (auth patient)
  - doctorId = repo select doctorId from slot join appointment where appointment.id = req.id
  - updated = repo delete from appointments where id = req.id and patientId = userId
  - if updated = 0
    - 404
  - 200
  - send to appointment.(slot.doctorId) topic: { doctorId, ctx.id, operation: "appointmentDeleted" }

- GET /doctors (auth patient)
  - doctors = select id, username from doctors
- GET /doctors/{id}/slots (auth patient)
  - slots = select Slot where Slot.doctorId = req.id and Appointment.id = null left join Appointment

- Nice to have
  - Transactions
  - Abstract the time_format
  - Abstraction for CRUD methods to avoid boilerplate
  - Actual asserts in test cases
  - Password hashing
  - JWT tokens

- Known low priority bugs
  - Patient can reserve an appointment in the past if the doctor has a slot in the past
  - Patient appointments can overlap
  - When editing a slot, it can't overlap with its old version
