- AuthMiddleware(role?)
  return (c) => {
    - user = repo select user by c.username and c.password
    - if (!user) return 401
    - if (role && user.role != role)
      - return 403
    - c.userContext = createContext(user)
    - c.next()
  }

- Auth(fn, db, role?)
  return (c) => {
    - user = repo(db) select user by c.username and c.password
    - if (!user)
      - c.return 401
    - if (role && user.role != role)
      - c.return 403
    - userContext = createContext(user)
    - fn(userContext, c)
  }

- FunctionThanNeedsAuth(userContext, c)
  - do stuff with userContext
  - return json stuff with c

- router.post("something", Auth(FunctionThatNeedsAuth, db, "doctor"))

- Business rules
  - Username must only contain letters and numbers

- POST /sign-up
  - user = repo select user by name
  - if (user) return 400 "A user with this name already exists"
  - repo insert user
  - return 200
- POST /sign-in
  - user = repo select user by username and password
  - if (!user) return 400 "Invalid name or password"
  - return { "token": base64encode("username:password") }
